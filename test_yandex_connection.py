#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex SpeechKit API
Test script for Yandex SpeechKit API connection verification

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ / Usage:
    python test_yandex_connection.py

–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
Required environment variables:
    YANDEX_API_KEY - –í–∞—à API –∫–ª—é—á Yandex Cloud
    YANDEX_FOLDER_ID - ID –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ Yandex Cloud
"""

import os
import sys
import requests
import json
from typing import Dict, Optional, Tuple

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª / Terminal colors
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_success(message: str):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"{Colors.GREEN}‚úÖ {message}{Colors.ENDC}")

def print_error(message: str):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    print(f"{Colors.RED}‚ùå {message}{Colors.ENDC}")

def print_warning(message: str):
    """–í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.ENDC}")

def print_info(message: str):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.ENDC}")

def print_header(message: str):
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}üîß {message}{Colors.ENDC}")

class YandexSpeechKitTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex SpeechKit"""
    
    def __init__(self, api_key: str, folder_id: str):
        self.api_key = api_key
        self.folder_id = folder_id
        self.base_url = "https://stt.api.cloud.yandex.net"
        self.async_url = "https://transcribe.api.cloud.yandex.net"
        
    def validate_credentials(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.api_key or self.api_key == "your-api-key-here":
            print_error("API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print_info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ YANDEX_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
            
        if not self.folder_id or self.folder_id == "your-folder-id-here":
            print_error("Folder ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print_info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ YANDEX_FOLDER_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞
        if not self.api_key.startswith('AQVN'):
            print_warning("API –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–±—ã—á–Ω–æ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'AQVN'")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Folder ID
        if not self.folder_id.startswith('b1g'):
            print_warning("Folder ID –∏–º–µ–µ—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–±—ã—á–Ω–æ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'b1g'")
            
        print_success("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return True
    
    def test_api_availability(self) -> Tuple[bool, Optional[Dict]]:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"""
        print_header("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API")
        
        url = f"{self.base_url}/speech/v1/stt:recognize"
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
        data = {
            "folderId": self.folder_id,
            "format": "lpcm",
            "sampleRateHertz": "8000",
        }
        
        try:
            response = requests.post(
                url, 
                headers=headers, 
                data=data, 
                timeout=30,
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                files={'audio': ('test.wav', b'', 'audio/wav')}
            )
            
            print_info(f"HTTP Status: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤
            if response.status_code == 200:
                print_success("API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True, response.json() if response.content else None
                
            elif response.status_code == 401:
                print_error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                print_info("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print_info("  ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                print_info("  ‚Ä¢ API –∫–ª—é—á –æ—Ç–æ–∑–≤–∞–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
                print_info("  ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞")
                return False, None
                
            elif response.status_code == 403:
                print_error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
                print_info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å 'ai.speechkit.user'")
                return False, None
                
            elif response.status_code == 429:
                print_error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!")
                print_info("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
                return False, None
                
            elif response.status_code == 400:
                # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∞—É–¥–∏–æ - –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
                print_success("API –¥–æ—Å—Ç—É–ø–µ–Ω! (–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 400 –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                try:
                    error_data = response.json()
                    print_info(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data.get('message', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                except:
                    pass
                return True, None
                
            else:
                print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                try:
                    error_data = response.json()
                    print_info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                except:
                    print_info(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                return False, None
                
        except requests.exceptions.Timeout:
            print_error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")
            return False, None
        except requests.exceptions.ConnectionError:
            print_error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
            print_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return False, None
        except Exception as e:
            print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False, None
    
    def test_folder_access(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É"""
        print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Operations API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
        url = "https://operation.api.cloud.yandex.net/operations"
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.get(
                url,
                headers=headers,
                params={"folderId": self.folder_id},
                timeout=10
            )
            
            if response.status_code in [200, 404]:  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
                print_success("–î–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                return True
            elif response.status_code == 403:
                print_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É!")
                print_info(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Folder ID: {self.folder_id}")
                return False
            else:
                print_warning(f"–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–¥ {response.status_code})")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ –Ω–µ —è–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞
                
        except Exception as e:
            print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É: {str(e)}")
            print_info("–≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return True
    
    def test_quota_limits(self) -> bool:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–æ—Ç–∞—Ö –∏ –ª–∏–º–∏—Ç–∞—Ö"""
        print_header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–æ—Ç–∞—Ö")
        
        print_info("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã Yandex SpeechKit:")
        print_info("  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: —Ñ–∞–π–ª—ã –¥–æ 1 –ú–ë")
        print_info("  ‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: —Ñ–∞–π–ª—ã –¥–æ 1 –ì–ë")
        print_info("  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4 —á–∞—Å–∞")
        print_info("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: WAV, MP3, FLAC, OGG")
        print_info("  ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: 8000-48000 –ì—Ü")
        
        print_warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∫–≤–æ—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ Yandex Cloud:")
        print_info("  https://console.cloud.yandex.com ‚Üí –ö–≤–æ—Ç—ã ‚Üí SpeechKit")
        
        return True
    
    def generate_test_summary(self, tests_passed: int, total_tests: int) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print_header("–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if tests_passed == total_tests:
            print_success(f"–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! ({tests_passed}/{total_tests})")
            print_success("Yandex SpeechKit –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print_info("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print_info("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ transcriber")
            print_info("  2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            print_info("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        else:
            print_error(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
            print_error("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            print_info("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:")
            print_info("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ Folder ID")
            print_info("  ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è") 
            print_info("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ Yandex Cloud")
            print_info("  ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://cloud.yandex.ru/docs/speechkit")

def load_credentials_from_env() -> Tuple[Optional[str], Optional[str]]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–∞"""
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
    env_file = '.env'
    if os.path.exists(env_file):
        print_info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ {env_file}")
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip().strip('"').strip("'")
                        if key in ['YANDEX_API_KEY', 'YANDEX_FOLDER_ID']:
                            os.environ[key] = value
        except Exception as e:
            print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª: {e}")
    
    api_key = os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    return api_key, folder_id

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_header("Yandex SpeechKit Connection Tester")
    print_info("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex SpeechKit API")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    api_key, folder_id = load_credentials_from_env()
    
    if not api_key or not folder_id:
        print_error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        print_info("\n–°–ø–æ—Å–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print_info("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print_info("   YANDEX_API_KEY=–≤–∞—à-api-–∫–ª—é—á")
        print_info("   YANDEX_FOLDER_ID=–≤–∞—à-folder-id")
        print_info("")
        print_info("2. –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print_info("   export YANDEX_API_KEY=–≤–∞—à-api-–∫–ª—é—á")
        print_info("   export YANDEX_FOLDER_ID=–≤–∞—à-folder-id")
        print_info("")
        print_info("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏: https://console.cloud.yandex.com")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = YandexSpeechKitTester(api_key, folder_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", tester.validate_credentials),
        ("–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API", lambda: tester.test_api_availability()[0]),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", tester.test_folder_access),
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–æ—Ç–∞—Ö", tester.test_quota_limits),
    ]
    
    tests_passed = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                tests_passed += 1
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    tester.generate_test_summary(tests_passed, total_tests)
    
    # –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if tests_passed == total_tests else 1)

if __name__ == "__main__":
    main()